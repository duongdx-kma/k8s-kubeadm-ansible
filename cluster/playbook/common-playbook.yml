- name: setup master and workers
  hosts: master_node, worker_node
  become: true
  vars_files:
    - vars.yaml
  tasks:
  - name: Disable swap
    shell: swapoff -a

  - name: Remove swap
    lineinfile:
      dest: /etc/fstab
      regexp: swap
      state: absent

  # Start: prerequisite configuration  container runtime
  # https://kubernetes.io/docs/setup/production-environment/container-runtimes/
  - name: config bt_netfilter module
    shell: |
      cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
      overlay
      br_netfilter
      EOF

  - name: Start overlay bt_netfilter module
    shell: |
      sudo modprobe overlay
      sudo modprobe br_netfilter

  - name: configure iptables to see bridged traffic
    shell: |
      cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
      net.bridge.bridge-nf-call-iptables  = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward                 = 1
      EOF


  - name: Apply sysctl params without reboot
    shell: sudo sysctl --system

  # End: prerequisite for container runtime

  # ---
  # Start: install container runtime
  - name: Uninstall old versions
    apt:
      name:
        - docker.io
        - docker-compose
        - docker-compose-v2
        - docker-doc
        - podman-docker
      state: absent

  - name: Install prerequisite for container run time
    apt:
      name:
        - curl
        - vim
        - gpg
        - apt-transport-https
        - ca-certificates
        - software-properties-common
      state: present
      update_cache: yes # this option is the same 'apt-get update'

  - name: Add Docker GPG apt Key
    apt_key:
      url: "https://download.docker.com/linux/{{ os_version }}/gpg"
      state: present

  - name: Add Docker Repository
    apt_repository:
      repo: "deb https://download.docker.com/linux/{{ os_version }} focal stable"
      state: present

  # kubernetes only need container.io as container runtime
  - name: Update apt and install containerd.io
    apt:
      name: containerd.io
      state: latest
      update_cache: true

  - name: enabled && restart containerd
    service:
      name: containerd
      state: restarted
      enabled: true

  - name: Edit config containerd
    copy:
      src: ../templates/config.toml
      dest: /etc/containerd/config.toml
    notify: Restart containerd
  # End: install container runtime

  # ---
  # Start: install kubeadm, kubelet, kubectl
  # https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/
  - name: make directory for saving key
    file:
      path: /etc/apt/keyrings
      state: directory
      mode: 0755

  - name: Add Kubernetes GPG key to APT keyring
    ansible.builtin.apt_key:
      keyring: "/etc/apt/keyrings/kubernetes-apt-keyring.gpg"
      url: "https://pkgs.k8s.io/core:/stable:/{{ crio_version }}/deb/Release.key"
      state: present

  - name: Add Kubernetes APT repository to sources.list
    ansible.builtin.copy:
      content: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/{{ crio_version }}/deb/ /"
      dest: "/etc/apt/sources.list.d/kubernetes.list"

  - name: Update APT cache
    ansible.builtin.apt:
      update_cache: yes

  - name: install kubelet, kubeadm, kubectl
    apt:
      name:
        - kubelet={{ k8s_version }}
        - kubeadm={{ k8s_version }}
        - kubectl={{ k8s_version }}
      state: present
      update_cache: yes

  - name: Hold kubelet, kubeadm, kubectl
    dpkg_selections:
      name: "{{ item }}"
      selection: hold
    loop:
      - kubelet
      - kubeadm
      - kubectl

  - name: Enable service kubelet, and enable persistently
    service:
      name: kubelet
      enabled: yes
  # End: install kubeadm, kubelet, kubectl

    # Start: crictl configuration
  - name: Passing crictl configuration
    copy:
      src: ../templates/crictl.yaml
      dest: /etc/crictl.yaml

  - name: add containerd group
    group:
      name: containerd
      state: present

  - name: change group for '/var/run/containerd/containerd.sock'
    file:
      path: /var/run/containerd/containerd.sock
      owner: root
      group: containerd

  - name: assign {{ ansible_user }} to containerd group
    user:
      name: "{{ ansible_user }}"
      groups: containerd
      append: yes
    # End: crictl configuration

  # ---
  #Start: install nfs-common:
  - name: install nfs client
    apt:
      name: nfs-common
      state: present
      update_cache: yes
    notify: Restart nfs-common
  #End: install nfs-common:

  #Start: install open-iscsi:
  - name: install open-iscsi
    apt:
      name: open-iscsi
      state: present
      update_cache: yes
    notify: Restart open-iscsi
  #End: install nfs-common:

  handlers:
  - name: Restart containerd
    service:
      name: containerd
      state: restarted

  - name: Restart nfs-common
    service:
      name: containerd
      state: restarted


  - name: Restart open-iscsi
    service:
      name: open-iscsi
      state: restarted