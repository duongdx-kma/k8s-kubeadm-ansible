# Default values for socket_chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
# Additional image on the output Deployment definition.
image:
  registry: docker.io
  pullPolicy: IfNotPresent
  repositories:
    backend:
      name: golang backend websocket
      image: duong1200798/golang_backend
      tag: v1
      port: 8088
      labels:
        run: backend
        app: backend
      serviceType: ClusterIP
    #---
    frontend:
      name: react frontend websocket
      image: duong1200798/socket_app_react
      tag: v1
      port: 8080
      labels:
        run: frontend
        app: frontend
      serviceType: ClusterIP
    #---
    database:
      name: mysql websocket
      image: duong1200798/socket_app_mysql
      tag: v1
      port: 3306
      labels:
        run: database
        app: database
      serviceType: ClusterIP

# Additional ingress on the output Deployment definition.
ingress:
  backend:
    name: socket-ingress-api
    className: nginx
    paths:
      - path: /api(/|$)(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: backend
            port:
              number: 8088
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /$2
      nginx.ingress.kubernetes.io/use-regex: "true"
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
  # ---
  frontend:
    name: socket-ingress
    className: nginx
    paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend
            port:
              number: 8080
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "false"

# Additional config map on the output Deployment definition.
configMaps:
  backend:
    name: backend-configmap
    data:
      app-env: dev
      app-port: "8088"
      db-driver: mysql
      db-host: database
      db-port: "3306"
  #---
  frontend:
    name: front-configmap
    data:
      api-url: http://192.168.56.16:30098/api #need a endpoint, which client browser can access
      websocket-url: ws://192.168.56.16:30098/api/ws #need a endpoint, which client browser can access

# Additional secret on the output Deployment definition.
secret:
  name: database-secret
  data:
    db-database: "c29ja2V0LWFwcA=="
    db-password: "ZHVvbmdkeDE="
    db-user: "ZHVvbmdkeA=="

# Additional secret on the output Deployment definition.
persistenVolumeClaim:
  name: database-pvc
  storageClassName: socket-app-storage-class
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Mi


# Additional replication on the output Deployment definition.
replication:
    backend: 2
    frontend: 2
    database: 1

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# environment variable

environmentVarialbes:
  backend:
    - name: APP_PORT
      valueFrom:
        configMapKeyRef:
          name: backend-configmap
          key: app-port
    - name: APP_ENV
      valueFrom:
        configMapKeyRef:
          key: app-env
          name: backend-configmap
    - name: DB_DRIVER
      valueFrom:
        configMapKeyRef:
          key: db-driver
          name: backend-configmap
    - name: DB_HOST
      valueFrom:
        configMapKeyRef:
          key: db-host
          name: backend-configmap
    - name: DB_PORT
      valueFrom:
        configMapKeyRef:
          key: db-port
          name: backend-configmap
    - name: DB_USER
      valueFrom:
        secretKeyRef:
          key: db-user
          name: database-secret
    - name: DB_PASSWORD
      valueFrom:
        secretKeyRef:
          key: db-password
          name: database-secret
    - name: DB_DATABASE
      valueFrom:
        secretKeyRef:
          key: db-database
          name: database-secret
  #---
  frontend:
    - name: REACT_APP_WS_URL
      valueFrom:
        configMapKeyRef:
          name: front-configmap
          key: websocket-url
    - name: REACT_APP_API_URL
      valueFrom:
        configMapKeyRef:
          name: front-configmap
          key: api-url
  #---
  database:
    - name: MYSQL_USER
      valueFrom:
        secretKeyRef:
          name: database-secret
          key: db-user
    - name: MYSQL_PASSWORD
      valueFrom:
        secretKeyRef:
          name: database-secret
          key: db-password
    - name: MYSQL_ROOT_PASSWORD
      valueFrom:
        secretKeyRef:
          name: database-secret
          key: db-password
    - name: MYSQL_DATABASE
      valueFrom:
        secretKeyRef:
          name: database-secret
          key: db-database


# Additional volumes on the output Deployment definition.
volumes:
  backend: [ ]
  frontend: [ ]
  database:
    - name: persistent-volume
      persistentVolumeClaim:
        claimName: database-pvc

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  backend: []
  frontend: []
  database:
    - name: persistent-volume
      mountPath: "/var/lib/mysql"


# Addition initContainers on the output Deployment definition
initContainers:
  backend:
    - name: service-checker
      image: busybox
      command: [ 'sh', '-c', 'until nslookup database.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for mysql up; sleep 2; done;' ]
  # ---
  frontend:
    - name: service-checker
      image: busybox
      command: [ 'sh', '-c', 'until nslookup backend.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for backend up; sleep 2; done;' ]
  # ---
  database: []

# Addition initContainers on the output Deployment definition
resources:
  # backend resources
  backend:
    requests:
      memory: "128Mi"
      cpu: "64m"
    limits:
      memory: "250Mi"
      cpu: "250m"
  # frontend resources
  frontend: {}
  # database resources
  database: {}

nodeSelector: {}

tolerations: []

affinity: {}

# Dependencies configuration: ingress-nginx
ingress-nginx:
  enabled: true
  controller:
    scope:
      enabled: true
      #namespace: "socket-namespace" # let's check it--------------------------------------------
      # get namespace's labels: kubectl get namespace "namespace-name" --show-labels
      namespaceSelector: "app=nginx-ingress" # must run: kubectl label namespace "namespace-name" app=nginx-ingress
    nodeSelector:
      kubernetes.io/hostname: node01 # check your node
    ingressClass: nginx
    service:
      type: NodePort
      nodePorts:
        http: 30098
        https: 30443

# Dependencies configuration: nfs server for mysql
socket-app-nfs:
  enabled: true
  nfs:
    server: 192.168.56.198
    path: /mnt/mysql
    # Reclaim policy for the main nfs volume
    reclaimPolicy: Retain
  storageClass:
    name: socket-app-storage-class
    testing: ReadWriteMany
    archiveOnDelete: true
    onDelete: retain
    reclaimPolicy: Retain

# Dependencies configuration: metrics-server
# Addition horizontal pod scale:
horizontalPortCscale:
  backend:
    maxReplicas: 5
    minReplicas: 2
    scaleTargetRef:
      apiVersion: apps/v1
      kind: Deployment
      name: backend
    targetCPUUtilizationPercentage: 60
  frontend: {}
  database: {}

metricServerEnable:
  backend: true
  frontend: false
  database: false

metrics-server:
  enabled: true
  defaultArgs:
    - --cert-dir=/tmp
    - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
    - --kubelet-use-node-status-port
    - --metric-resolution=15s
    - --kubelet-insecure-tls # must add for running

